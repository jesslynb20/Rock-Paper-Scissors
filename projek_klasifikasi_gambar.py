# -*- coding: utf-8 -*-
"""Projek Klasifikasi Gambar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j9pYeiUfg_TkBMsj-LswsmsW2-W00v2B
"""

# Nama: Jesslyn Brigitta
# Dicoding

import tensorflow as tf

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip

import zipfile,os
local_zip = 'rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('rockpaperscissors')
zip_ref.close()
 
base_dir = 'rockpaperscissors/rockpaperscissors'
rock_dir = os.path.join(base_dir, 'rock')
paper_dir = os.path.join(base_dir, 'paper')
scissors_dir = os.path.join(base_dir, 'scissors')

from sklearn.model_selection import train_test_split

rock_dir_train, rock_dir_test = train_test_split(os.listdir(rock_dir), test_size=0.4, random_state=42)
paper_dir_train, paper_dir_test = train_test_split(os.listdir(paper_dir), test_size=0.4, random_state=42)
scissors_dir_train, scissors_dir_test = train_test_split(os.listdir(scissors_dir), test_size=0.4, random_state=42)

train_dir = os.path.join(base_dir, 'train')
test_dir = os.path.join(base_dir, 'test')

import pandas as pd

photo_dir_train = rock_dir_train + paper_dir_train + scissors_dir_train
photo_dir_test = rock_dir_test + paper_dir_test + scissors_dir_test

number_rock_train = []
number_paper_train = []
number_scissors_train = []
number_rock_test = []
number_paper_test = []
number_scissors_test = []

for photo in photo_dir_train:
  if photo in os.listdir(rock_dir):
    number_rock_train.append('rock')
  elif photo in os.listdir(paper_dir):
    number_paper_train.append('paper')
  else:
    number_scissors_train.append('scissors')

for photo in photo_dir_test:
  if photo in os.listdir(rock_dir):
    number_rock_test.append('rock')
  elif photo in os.listdir(paper_dir):
    number_paper_test.append('paper')
  else:
    number_scissors_test.append('scissors')

train_dict = {'filename': rock_dir_train + paper_dir_train + scissors_dir_train, 'type': number_rock_train + number_paper_train + number_scissors_train}
test_dict = {'filename': rock_dir_test + paper_dir_test + scissors_dir_test, 'type': number_rock_test + number_paper_test + number_scissors_test}

train_df = pd.DataFrame(data=train_dict)
test_df = pd.DataFrame(data=test_dict)

os.mkdir(train_dir)
os.mkdir(test_dir)

import shutil

for photo in photo_dir_train:
  if photo in os.listdir(rock_dir):
    shutil.copy(os.path.join(rock_dir, photo), os.path.join(train_dir, photo))
  elif photo in os.listdir(paper_dir):
    shutil.copy(os.path.join(paper_dir, photo), os.path.join(train_dir, photo))
  else:
    shutil.copy(os.path.join(scissors_dir, photo), os.path.join(train_dir, photo))

for photo in photo_dir_test:
  if photo in os.listdir(rock_dir):
    shutil.copy(os.path.join(rock_dir, photo), os.path.join(test_dir, photo))
  elif photo in os.listdir(paper_dir):
    shutil.copy(os.path.join(paper_dir, photo), os.path.join(test_dir, photo))
  else:
    shutil.copy(os.path.join(scissors_dir, photo), os.path.join(test_dir, photo))

from tensorflow.keras.preprocessing.image import ImageDataGenerator
 
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=30,
                    horizontal_flip=True,
                    vertical_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')
 
test_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=30,
                    horizontal_flip=True,
                    vertical_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

train_generator = train_datagen.flow_from_dataframe(
        dataframe = train_df,
        directory = train_dir,
        x_col = 'filename',
        y_col = 'type',
        target_size=(150, 150), 
        batch_size=25,
        class_mode='categorical')
 
test_generator = test_datagen.flow_from_dataframe(
        dataframe = test_df,
        directory = test_dir,
        x_col ='filename',
        y_col = 'type',
        target_size=(150, 150),
        batch_size=25,
        class_mode='categorical')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(32, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

model.fit(
      train_generator,
      steps_per_epoch=25,
      epochs=20,
      validation_data=test_generator,
      validation_steps=5,
      verbose=2)

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
from google.colab import files
from keras.preprocessing import image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# %matplotlib inline
 
uploaded = files.upload()
 
for fn in uploaded.keys():
 
  # predicting images
  path = fn
  img = image.load_img(path, target_size=(150,150))
  imgplot = plt.imshow(img)
  x = image.img_to_array(img)
  x = np.expand_dims(x, axis=0)
 
  images = np.vstack([x])
  classes = model.predict(images, batch_size=10)
  
  print(fn)
  if classes[0,0] == 1:
    print('paper')
  elif classes[0,1] == 1:
    print('rock')
  else:
    print('scissors')